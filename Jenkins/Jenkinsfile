pipeline {
    agent any

    environment {
        PYTHON_EXE = "D:\\Jenkins_Python\\.venv\\Scripts\\python.exe"
        SCRIPT_NAME = "Jenkins\\run_canoe_com.py"
        REPORT_GENERATION_PATH = "D:\\can\\vTESTstudio\\TestReports" // <-- 오타 수정 및 백슬래시 이스케이프 확인
        REPORT_FILE_PATTERN = "*.vtestreport"
        ARTIFACT_STAGING_DIR = "reports"
    }

    stages { // 이 stages 블록 내용이 비어있으면 안됩니다.
        stage('Checkout Source') {
            steps {
                git branch: 'feature/Jenkins', url: 'https://github.com/jjongs2/can.git'
            }
        }

        stage('Run CANoe Automation') {
            steps {
                bat """
                    echo Running integrated CANoe automation script...
                    "${PYTHON_EXE}" "${WORKSPACE}\\%SCRIPT_NAME%"
                    if %errorlevel% neq 0 (
                        exit /b %errorlevel%
                    )
                """
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
            // steps 블록 없이 script 블록을 바로 사용 시도
            script {
                echo "Attempting to archive vTESTreport files..."
                def sourceReportPath = env.REPORT_GENERATION_PATH
                def destinationStagingPath = "${WORKSPACE}\\%ARTIFACT_STAGING_DIR%"

                try {
                    bat "mkdir %ARTIFACT_STAGING_DIR%"
                    echo "Created staging directory: ${destinationStagingPath}"

                    bat "xcopy /s /y \"${sourceReportPath}\\%REPORT_FILE_PATTERN%\" \"${destinationStagingPath}\\\""
                    echo "Copied report files from ${sourceReportPath} to ${destinationStagingPath}"

                    archiveArtifacts artifacts: "${ARTIFACT_STAGING_DIR}/**/*.vtestreport", fingerprint: true
                    echo "Successfully archived vTESTreport files."

                } catch (Exception e) {
                    echo "Failed to archive vTESTreport files: ${e.getMessage()}"
                }
            }
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}