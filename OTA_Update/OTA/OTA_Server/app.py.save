# app.py

from flask import Flask, request, abort, redirect, render_template, url_for, flash, send_from_directory, jsonify, session
from werkzeug.middleware.proxy_fix import ProxyFix
import os
import glob
import json
import bcrypt
import secrets
import hashlib
from flask_wtf import CSRFProtect
from datetime import timedelta, datetime
from login_form import LoginForm # login_form.py 파일이 있다고 가정
from flask_session import Session # Flask-Session이 설치되어 있다고 가정
import logging
from logging.handlers import RotatingFileHandler
from werkzeug.utils import secure_filename
import sys
from pythonjsonlogger import jsonlogger
import time # 타임스탬프 사용을 위해 추가
import re # 파일명 파싱을 위한 정규표현식 모듈 추가

# MQTT 및 암호화 관련 라이브러리 추가
import paho.mqtt.publish as publish
import struct
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Random import get_random_bytes

# Google Cloud Secret Manager 관련 임포트
from google.cloud import secretmanager

# --- 중요 보안 권장 사항 ---
# 실제 운영 환경에서는 반드시 HTTPS를 적용하여 서버와 차량 간의 통신을 암호화해야 합니다.
# 이는 논문에서 언급된 '기밀성(Confidentiality)' 요구사항을 충족하기 위해 필수적입니다.
# Flask 자체 개발 서버는 프로덕션용이 아니므로, Gunicorn, Nginx 등의 WSGI 서버와 함께 사용해야 합니다.
# ---

app = Flask(__name__)
app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_host=1, x_prefix=1)

# TODO: 보안 강화 - app.secret_key는 환경 변수나 Google Secret Manager를 통해 관리해야 합니다.
# 코드에 하드코딩하는 것은 매우 위험합니다.
app.secret_key = 'secret_key'
app.config['WTF_CSRF_SECRET_KEY'] = app.secret_key

csrf = CSRFProtect(app)

app.permanent_session_lifetime = timedelta(minutes=10)

UPLOAD_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'upload')
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

USER_FILE = 'users.json'
VEHICLE_FILE = 'vehicles.json'
NONCE_FILE = 'nonces.json'
# TODO: 견고성 및 안정성 - JSON 파일 대신 PostgreSQL, MySQL 등의 데이터베이스를 도입해야 합니다.
# 이는 데이터의 지속성, 무결성, 동시성 처리에 필수적입니다.

AUDIT_LOG_FILE = 'audit.log'
audit_logger = logging.getLogger('audit')
audit_logger.setLevel(logging.INFO)

logHandler = RotatingFileHandler(AUDIT_LOG_FILE, maxBytes=5 * 1024 * 1024, backupCount=5)
formatter = jsonlogger.JsonFormatter('%(asctime)s %(levelname)s %(name)s %(message)s')
logHandler.setFormatter(formatter)
audit_logger.addHandler(logHandler)

# Nonce 만료 시간 설정 (예: 5분)
NONCE_EXPIRATION_SECONDS = 5 * 60 # 5분

# === MQTT 브로커 설정 ===
# TODO: 실제 MQTT 브로커 주소와 포트로 변경하세요!
MQTT_BROKER_HOST = "127.0.0.1"
MQTT_BROKER_PORT = 1883 # 일반적으로 비보안 MQTT 포트 (TLS/SSL 사용 시 8883 등)

# MQTT 토픽 설정
MQTT_TOPIC_UPDATE_AVAILABLE = "ota/update/available" # 새 펌웨어 알림 토픽

# === 펌웨어 보안 처리 관련 설정값 ===
# make_bin_file_hybrid.py에서 가져옴
MAGIC = 0xDEADBEEF
# TODO: ECU_ID 및 VERSION은 파일명에서 동적으로 가져오도록 변경되었습니다.
# 따라서 DEFAULT_ECU_ID 및 DEFAULT_VERSION 변수는 더 이상 사용하지 않습니다.

# 파일명에서 ECU_ID와 VERSION을 추출하기 위한 정규 표현식
# 예: firmware_ECU03_V06.bin
FILENAME_PATTERN = re.compile(r'.*ECU(\d+)_V(\d+)\.bin$')

# === Google Cloud Secret Manager 설정 ===
# TODO: 여기에 당신의 GCP 프로젝트 ID를 입력하세요!
GCP_PROJECT_ID = "thematic-grin-463106-m2"
SERVER_PRIVATE_KEY_SECRET_ID = "ota-server-private-key" # Secret Manager에 저장한 서버 개인키 비밀 이름
VEHICLE_PUBLIC_KEY_FILE = "public.pem" # 차량의 공개키 파일 경로

# 전역 변수로 키 인스턴스 저장 (최초 1회 로드 후 재사용)
_server_private_key = None
_vehicle_public_key = None

def write_audit_log(event, status="SUCCESS", **kwargs):
    # 공통 필드
    log_data = {
        "event": event,
        "status": status,
        "timestamp": datetime.now().isoformat(),
        "ip": request.remote_addr
    }
    
    # 세션 정보 (로그인 되어 있을 경우)
    if session.get('logged_in'):
        log_data["user"] = session.get('username')
        log_data["role"] = session.get('role')

    # 'filename' 대신 'file_name' 사용
    if 'filename' in kwargs:
        kwargs['file_name'] = kwargs.pop('filename')
    
    # 추가적인 kwargs 필드 포함
    log_data.update(kwargs)

    audit_logger.info("Audit log entry", extra=log_data)

def load_users():
    if not os.path.exists(USER_FILE):
        initial_users = {
            "admin": {"password": bcrypt.hashpw("admin_password".encode('utf-8'), bcrypt.gensalt()).decode('utf-8'), "role": "admin"}
        }
        with open(USER_FILE, 'w') as f:
            json.dump(initial_users, f, indent=4)
    with open(USER_FILE, 'r') as f:
        return json.load(f)

def load_vehicles():
    if not os.path.exists(VEHICLE_FILE):
        sample_vehicles = {
            "Sapaghetti": {
                "token": "SECRET_API_KEY_FOR_Sapaghetti_VEHICLE"
            }
        }
        with open(VEHICLE_FILE, 'w') as f:
            json.dump(sample_vehicles, f, indent=4)
        return sample_vehicles
    with open(VEHICLE_FILE, 'r') as f:
        return json.load(f)

def load_nonces():
    if not os.path.exists(NONCE_FILE):
        return {}
    try:
        with open(NONCE_FILE, 'r') as f:
            content = f.read()
            if not content:
                return {}
            return json.loads(content)
    except json.JSONDecodeError as e:
        print(f"[ERROR] nonces.json 파일을 읽는 중 오류 발생: {e}. 파일을 초기화합니다.", file=sys.stderr)
        return {}

def save_nonces(nonces_data):
    with open(NONCE_FILE, 'w') as f:
        json.dump(nonces_data, f, indent=4)

def load_server_private_key():
    """
    Google Secret Manager 또는 로컬 파일에서 서버의 개인 키를 로드합니다.
    """
    global _server_private_key
    if _server_private_key:
        return _server_private_key # 이미 로드된 키 재사용

    try:
        print("🌍 Secret Manager에서 서버 개인키를 로드 시도 중...")
        client = secretmanager.SecretManagerServiceClient()
        name = f"projects/{GCP_PROJECT_ID}/secrets/{SERVER_PRIVATE_KEY_SECRET_ID}/versions/latest"
        response = client.access_secret_version(request={"name": name})
        server_private_key_pem = response.payload.data.decode("utf-8")
        _server_private_key = RSA.import_key(server_private_key_pem)
        print("✅ 서버 개인키를 Secret Manager에서 성공적으로 로드했습니다.")
    except Exception as e:
        print(f"❌ Secret Manager에서 서버 개인키를 로드하는 데 실패했습니다: {e}")
        print("❗ 대체: 로컬 파일 'private.pem'에서 개인키를 로드합니다. 이 방식은 운영 환경에서 권장되지 않습니다.")
        if not os.path.exists("private.pem"):
            print("❌ 로컬 'private.pem' 파일도 찾을 수 없습니다. 개인키 없이는 펌웨어를 생성할 수 없습니다.")
            return None
        with open("private.pem", "rb") as f:
            _server_private_key = RSA.import_key(f.read())
        print("✅ 로컬 'private.pem'에서 개인키를 로드했습니다. (보안 경고!)")
    return _server_private_key

def load_vehicle_public_key():
    """
    로컬 파일에서 차량의 공개 키를 로드합니다.
    """
    global _vehicle_public_key
    if _vehicle_public_key:
        return _vehicle_public_key # 이미 로드된 키 재사용

    if not os.path.exists(VEHICLE_PUBLIC_KEY_FILE):
        print(f"❌ '{VEHICLE_PUBLIC_KEY_FILE}' 파일을 찾을 수 없습니다. 차량의 공개키 파일이 있어야 합니다.")
        return None
    with open(VEHICLE_PUBLIC_KEY_FILE, "rb") as f:
        _vehicle_public_key = RSA.import_key(f.read())
    print(f"✅ '{VEHICLE_PUBLIC_KEY_FILE}'에서 차량의 공개키를 로드했습니다.")
    return _vehicle_public_key

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    users = load_users()
    if form.validate_on_submit():
        username = form.username.data
        password = form.password.data.encode('utf-8')
        if username in users:
            stored_hash = users[username]['password'].encode('utf-8')
            if bcrypt.checkpw(password, stored_hash):
                session.permanent = True
                session['logged_in'] = True
                session['username'] = username
                session['role'] = users[username]['role']
                write_audit_log(event="LOGIN", status="SUCCESS", user=username)
                return redirect(url_for('upload_form'))
        
        write_audit_log(event="LOGIN", status="FAILURE", user=username)
        return redirect(url_for('login', error='1', prev_username=username))    
    
    prev_username = request.args.get('prev_username')
    if prev_username:
        form.username.data = prev_username
    return render_template('login.html', form=form)

@app.route('/logout')
def logout():
    write_audit_log(event="LOGOUT", user=session.get('username'))
    session.pop('logged_in', None)
    session.pop('username', None)
    session.pop('role', None)
    return redirect(url_for('login'))

@app.route('/')
def upload_form():
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    # 파일 목록을 전달하여 upload.html에 표시
    firmware_files = glob.glob(os.path.join(app.config['UPLOAD_FOLDER'], '*_secure_hybrid.bin'))
    # 파일명만 추출하여 전달
    files = [os.path.basename(f) for f in firmware_files]
    return render_template('upload.html', files=files) # files 변수를 추가하여 전달


