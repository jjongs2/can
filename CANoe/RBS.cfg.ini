# This file contains some settings of the configuration along
# which it is placed. You should pass it along with the cfg file
# and store it in your configuration management system.
#
# You may edit the settings directly, read the comments for a
# description. There's not necessarily any further explanation
# in the online help.
#
# The file format is a simple .ini format. That means it's a
# key=value list, with the settings grouped into [sections].

# General runtime settings
[Runtime]
# Enforce initialization of optional values such that they are considered unset initially as long as
# not specified differently by vCDL attribute (same keyword). When set to 0, optional elements
# are initialized to the default value of their datatype.
InitializeOptionalsAsNone=0

# Default value for the [EnableChangeInfo] vCDL attribute, which can be applied to distributed object
# members. It enables the calculation of change information. When set to 1, it is tracked whether the
# value has changed, how often it has changed so far, and at which time it has most recently changed.
# The calculation of change info has a performance cost. If any change handlers are listening for
# changes of the DO member in question, its change info has to be calculated regardless of this setting.
EnableChangeInfo=1

# Settings pertaining to the CAPL compiler and runtime.
[CAPL]

# Compatibility switch: an old version of the CAPL compiler
# initialized integer constants and variables in a different
# (and target dependent) way, e.g., if they were initialized by a
# floating point constant (const dword x = 3.1).
# This was fixed to a documented behavior, but if you have 
# old code which relies on the old behavior, set the switch to 1.
LegacyNumericInitializations=0

# Compatibility switch: an old version of the CAPL compiler 
# treated DWORD expressions as long (i.e., signed) in 
# comparisons. That was fixed, but if you have old CAPL code
# which relies on the old behavior, set the switch to 1.
CompareDwordAsLong=0

# Compatibility switch: an old version of the CAPL compiler
# stored each string constant separately in the data segment,
# even if they had the same value. This was changed so the
# memory is shared for equal string constants, sometimes 
# significantly reducing the amount of memory needed.
# If you have old CAPL code which relies on the old behavior 
# by _changing_ a string constant, but expecting other uses
# of an equal constant to remain the same, set the switch to 0.
ShareEqualStringConstants=1

# Compatibility switch: older versions of CANoe used case 
# sensitive search when looking for specific CAPL callbacks
# (e.g., OnXCPEvent or OnTCPReceive), even though CAPL functions 
# themselves are not case sensitive.
# If you have old CAPL code which relies on the old behavior
# by having overloads (functions with the same name, but different
# parameters) of which one of them shall work as such a callback,
# set the switch to 1.
CaseSensitiveCallbackSearch=0

# Compatibility switch: in CANoe DE configurations normal nodes 
# in the Simulation Setup are assigned to a (single) bus 
# (Gateways are assigned to more buses) and every bus has one 
# or more databases assigned.
# Older versions of CANoe let a node access all databases of the
# current configuration, while in newer versions, a node can only
# access (see) the database(s) assigned to its bus.
# If you have old CAPL code which relies on the old behavior
# by accessing a database which is not assigned to its bus,
# set the switch to 1
GlobalDatabaseAccess=0

# Settings pertaining to the Connectifity Feature Set
[Connectivity]

# Whether to use the new implementation of the BackendCloudConnector
# (formerly known as the BackendCloudClient) which is responsable
# for commuicating requests of the different Bindings. Setting this 
# to 0 will cause the old implementation to be used.
EnableNewBCC=1

# Set send-queue size.
# Increase this parameter if you get the error "Overrun send queue" during measurement.
QueueCapacity=1000

# Settings for the C# API, as well as the related build processes and runtime configuration options
[.NET]

# Enabling this switch will override the .NET version setting to use .NET Framework 2.0
# .NET Framework 2.0 is no longer supported by Microsoft and the use of this switch is deprecated
# The ability to use .NET Framework 2.0 may be removed in future versions of CANoe
UseNet20=0

# Compatibility switch: Enabling this switch causes types library assemblies to have configuration-specific names when using .NET Framework
UseCfgSpecificAssemblyNames=1

# .NET 8 application layer type library: Generate separate _Types and _Objects types in addition to the .Types and .Objects subtypes
GenerateLegacyTypes=1

[SOMEIP]
# Enforce that the values of events/fields can be set via the service signal (e.g. $-operator) even if 
# Application Objects are activated for the SimSetup.
# If Application Objects are disabled for the SimSetup, this option has no impact.
ForceActiveServiceSignals=0

# Threshold size to determine whether generated Application Layer Objects (SOME/IP or AUTOSAR PDUs)
# should use the high-performance 'Bytes' data type instead of a normal byte array.
# The 'Bytes' data type is used for byte arrays that are >= ByteArrayThresholdSize.
ByteArrayThresholdSize=1000

# Settings for the Python API
[Python]
# Enforce the restart of the RT Kernel after each measurement. This might be required if dynamically loaded 
# Python modules can't be unloaded correctly and therefore cause a crash or undefined behavior in the RT Kernel.
# 0: Restart is not forced.
# 1: Restart is forced.
ForceRtKernelRestart=0

# Diagnostics settings
[Diagnostics]
# Diagnostics on FlexRay
# Disable atomic PDU group update
# the atomic PDU group update ensures correct sequence of frames
# in a diagnostic message, transferred over multiple PDUs
# this feature guarantees message data integrity, 
# but may slow down transmission performance by skipping some cycles
FR_DisableAtomicPDUGroupUpdate=0

[Ethernet]
# Determines whether the TLS socket communication is executed on a separate thread.
# 0: Use global default from can.ini. If not defined in can.ini, the default is off
# 1: use a seperate thread in real bus mode
# 2: use a seperate thread in real bus and simulated bus (animated with factor) mode
TlsUseMultithreading=0
SignalProtocolDLL=

[Security]
IdsCanIDs=
IdsCanTpIDs=

# Configuration for the AUTOSAR Intrusion Detection System (IDS) Observer
# -----------------------------------------------------------------------

# Configure the CAN IDs of CAN Frames that should be interpreted as IDS Messages.
# This is a ',' separated list of numbers.
# The numbers can have the following formats:
# - Decimal (no leading zero!).
# - Hex if prefixed with "0x".
# - Octal if prefixed with "0".
; IdsCanIDs=

# Configure the CAN IDs of CAN-TP Data that should be interpreted as IDS Messages.
# Note that the ISO TP Observer needs to be configured too!
# This is a ',' separated list of numbers.
# The numbers can have the following formats:
# - Decimal (no leading zero!).
# - Hex if prefixed with "0x".
# - Octal if prefixed with "0".
; IdsCanTpIDs=

[TunnelProtocolDecoders]
# Suppress shifting of CAN standard identifiers in ASAM CMP CAN / CAN FD Data Messages
# 0: The ID will be shifted by 18 bits (as defined in ASAM CMP specification)
# 1: The ID will *not* be shifted (behavior of CANoe/CANalyzer prior to 18 SP4)
CMPSuppressShiftingOfStandardCANIdentifiers=0
